package TestTools;

import de.rwth.i5.kinectvision.machinevision.model.DepthModel;
import org.nustaq.serialization.FSTConfiguration;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;

/**
 * Class for storing the generated Kinect data in a file
 */
public class KinectDataStore {
    // Static initialization for the serialization tool
    private static FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();
    private static short[] lastInfra = new short[0];

    static {
        conf.registerClass(DepthModel.class);
        conf.registerClass(short[].class);
    }

    /**
     * Saves a generated byte array in a file
     *
     * @param absPath The absolute path to the file to be created
     * @param data    The data to save
     */
    public static void saveBinaryData(String absPath, byte[] data) {
        Path file = Paths.get(absPath);
        try {
            Files.write(file, data);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void saveInfraredData(String absPath, short[] data) {
        saveBinaryData(absPath, conf.asByteArray(data));
    }

    public static short[] readInfraredData(String fileName) {
        if (lastInfra.length == 0) {
            lastInfra = (short[]) conf.asObject(readBinaryDataFromResources(fileName));
        }
        return lastInfra;
    }

    /**
     * Saves the generated infrared image byte array in a file
     *
     * @param absPath The absolute path to the file to be created
     * @param model   The DepthModel to save
     */
    public static void saveDepthData(String absPath, DepthModel model) {
        saveBinaryData(absPath, conf.asByteArray(model));
    }

    /**
     * Reads the infrared data from the resources folder
     *
     * @param fileName The file name containing the image
     * @return the byte array containing the image or null if something bad happened
     */
    public static DepthModel readDepthData(String fileName) {
        return (DepthModel) conf.asObject(readBinaryDataFromResources(fileName));
    }

    /**
     * Reads the data from the resources folder
     *
     * @param fileName The file name containing the data
     * @return the byte array containing the data or null if something bad happened
     */
    public static byte[] readBinaryDataFromResources(String fileName) {
        URI uri = null;
        try {
            uri = new URI(Objects.requireNonNull(ClassLoader.getSystemClassLoader().getResource(fileName)).getFile());
        } catch (URISyntaxException e) {
            e.printStackTrace();
            return null;
        }

        File file = new File(uri.getPath());
//        File file = new File(fileName);
        try {
            return Files.readAllBytes(file.toPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}
